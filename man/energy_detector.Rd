% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/energy_detector.R
\name{energy_detector}
\alias{energy_detector}
\title{\code{energy_detector} detects the start and end of vocalizations in sound files based
on amplitude, duration, and frequency range attributes.}
\usage{
energy_detector(files = NULL, envelopes = NULL, path = NULL, wl = 512, power = 1,
thinning = 1, bp = NULL, ssmooth = 0, filter = "ffilter", threshold = 15, hold.time = 0,
min.duration = NULL, max.duration = NULL, parallel = 1, pb = TRUE)
}
\arguments{
\item{files}{Character vector indicating the sound files that will be analyzed. Optional. If 'files' and 'envelopes' are not supplied then the function will work on all supported format sound files in the working directory.}

\item{envelopes}{An object of class 'envelopes' (generated by \code{\link{get_envelopes}}) containing the amplitude envelopes of the sound files to be analyzed. If 'files' and 'envelopes' are not supplied then the function will work on all supported format sound files in the working directory.}

\item{path}{Character string containing the directory path where the sound files are located.
If \code{NULL} (default) then the current working directory is used.}

\item{wl}{A numeric vector of length 1 specifying the window used internally by
\code{\link[seewave]{ffilter}} for bandpass filtering (so only applied when 'bp' is supplied). Default is 512.}

\item{power}{A numeric vector of length 1 indicating a power factor applied to the amplitude envelope. Increasing power will reduce low amplitude modulations and increase high amplitude modulations, in order to reduce background noise. Default is 1 (no change). This argument is used internally by \code{\link{get_envelopes}}. Not used if 'envelopes' are supplied.}

\item{thinning}{Numeric vector of length 1 in the range 0~1 indicating the proportional reduction of the number of
samples used to represent amplitude envelopes (i.e. the thinning of the envelopes). Usually amplitude envelopes have many more samples
than those needed to accurately represent amplitude variation in time, which affects the size of the
output (usually very large R objects / files). Default is  \code{1} (no thinning). Higher sampling rates can afford higher size reduction (e.g. lower thinning values). Reduction is conducted by interpolation using \code{\link[stats]{approx}}. Note that thinning may decrease time precision, and the higher the thinning the less precise the time detection. This argument is used internally by \code{\link{get_envelopes}}. Not used if 'envelopes' are supplied.}

\item{bp}{Numeric vector of length 2 giving the lower and upper limits of a
frequency bandpass filter (in kHz). Default is \code{NULL}.  This argument is used internally by \code{\link{get_envelopes}}. Not used if 'envelopes' are supplied.}

\item{ssmooth}{A numeric vector of length 1 to smooth the amplitude envelope
  with a sum smooth function. Default is 0 (no smoothing). Note that smoothing is applied before thinning (see 'thinning' argument). This argument is used internally by \code{\link{get_enveloples}}. Not used if 'envelopes' are supplied.
#' @param ssmooth A numeric vector of length 1 to smooth the amplitude envelope
  with a sum smooth function. Default is 0. Note that smoothing is applied before thinning (see 'thinning' argument).}

\item{filter}{Character vector of length 1 indicating the bandpass filter to be applied (only used if 'bp' is supplied). Three options available, (corresponding to the frequency filter functions in the 'seewave' package): ffilter (\code{\link[seewave]{ffilter}}), bwfilter (\code{\link[seewave]{bwfilter}}) and fir (\code{\link[seewave]{fir}}).
Not used if 'envelopes' are supplied.}

\item{threshold}{A numeric vector of length 1 specifying the amplitude threshold for detecting
signals (in \%).}

\item{hold.time}{Numeric vector of length 1. Specifies the time range at which selections will be merged (i.e. if 2 selections are separated by less than the specified hold.time they will be merged in to a single selection). Default is \code{0} (no hold time applied).}

\item{min.duration}{Numeric vector of length 1 giving the shortest duration (in
seconds) of the signals to be detected. It removes signals below that
threshold. If 'hold.time' is supplied signals are first merged and then filtered by duration.}

\item{max.duration}{Numeric vector of length 1 giving the longest duration (in
seconds) of the signals to be detected. It removes signals above that
threshold. If 'hold.time' is supplied signals are first merged and then filtered by duration.}

\item{parallel}{Numeric. Controls whether parallel computing is applied.
It specifies the number of cores to be used. Default is 1 (i.e. no parallel computing).}

\item{pb}{Logical argument to control progress bar. Default is \code{TRUE}.}
}
\value{
A data frame containing the start and end of each signal by
  sound file. If no signal was detected for a sound file it is not included in the output data frame.
}
\description{
\code{energy_detector} detects the start and end of vocalizations in sound files based
on amplitude, duration, and frequency range attributes.
}
\details{
This function determines the start and end of signals in sound files. Sound files should be located in the
   working directory or the path to the sound files should be provided using the 'path' argument. The routine steps are: 1) calculating/modfiying amplitude envelopes (unless 'envelopes' is supplied), 2)  detecting signals above the threshold, 3) merging signals (if 'hold.time' is supplied) and 4) filtering signals based on duration (if 'min.duration' and/or 'max.duration' are supplied).
}
\examples{
{
 \dontrun{
# Save example files into temporary working directory
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4"))
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))

# using smoothing and minimum duration
detec <- energy_detector(files = c("Phae.long1.wav", "Phae.long2.wav",
"Phae.long3.wav", "Phae.long4.wav"),
path = tempdir(), threshold = 6, ssmooth = 300,
bp = c(2, 9), wl = 300, min.duration = 0.09)

# diagnose detection
diagnose_detection(reference = lbh_selec_reference,
detection = detec)

# without declaring 'files'
detec <- energy_detector(path = tempdir(), threshold = 6, ssmooth = 300,
bp = c(2, 9), wl = 300, min.duration = 0.09)

# diagnose detection
diagnose_detection(reference = lbh_selec_reference,
detection = detec)

# using hold time
detec <- energy_detector(threshold = 10, hold.time = 0.15,
bp = c(2, 9), wl = 300, path = tempdir())

# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec)

# calculate envelopes first
envs <- get_envelopes(bp = c(2, 9), wl = 300, path = tempdir())

# then run detection providing 'envelopes' (but no 'files')
detec <- energy_detector(envelopes = envs, threshold = 10, hold.time = 0.15, min.duration = 0.05)

# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)

# USIN OTHER SOUND FILE FORMAT (flac program must be installed)
 # fisrt convert files to flac
 warbleR::wav_2_flac(path = tempdir())

 # change sound file extension to flac
 flac_reference <- lbh_selec_reference
 flac_reference$sound.files <- gsub(".wav", ".flac", flac_reference$sound.files)

 # run detection
 detec <- energy_detector(files = c("Phae.long1.flac", "Phae.long2.flac",
 "Phae.long3.flac", "Phae.long4.flac"), path = tempdir(), threshold = 6,
 ssmooth = 300, bp = c(2, 9), wl = 300, min.duration = 0.09)

 # diagnose detection
 diagnose_detection(reference = flac_reference, detection = detec)
 }
}

}
\references{
{
Araya-Salas, M. (2020), ohun: automatic detection of acoustic signals. R package version 0.1.0.
}
}
\seealso{
\code{\link{optimize_energy_detector}}
}
\author{
Marcelo Araya-Salas (\email{marcelo.araya@ucr.ac.cr}). Implements a
modified version of the timer function from seewave.
}
