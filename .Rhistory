if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, simulated = FALSE){
# setwd(path)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = extensible) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = extensible) #save sound files
if (simulated){
# Creating vector for duration
durs <- rep(c(0.3, 1), 5)
# Creating simulated song
set.seed(12)
simulated_1 <- warbleR::simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_1", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18)
sim_2 <- sim_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_2", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18, am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1))
sel_tab2 <- sel_tab1 <- simulated_1$selec.table
sel_tab2$sound.files <- gsub("_1", "_2", sel_tab2$sound.files)
sel_tab <- rbind(sel_tab1, sel_tab2)
return(sel_tab)
}
# if (other.formats){
#   file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
#
# file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
#
#   file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
FUN <- "feature_reference"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# perfect detection
output <- feature_reference(reference = lbh_reference[, c(1:4)])
output
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# including duty cycle
feature_reference(reference = lbh_reference[, c(1:4)], path = tempdir())
# by sound file
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE)
# by  sound file and including path
feature_reference(reference = lbh_reference[, c(1:4)], by.sound.file = TRUE, path = tempdir())
# by  sound file and including path
feature_reference(reference = lbh_reference, by.sound.file = TRUE, path = tempdir())
# with freq columns
# perfect detection
feature_reference(reference = lbh_reference)
# including duty cycle
feature_reference(reference = lbh_reference, path = tempdir())
# including duty cycle
feature_reference(reference = lbh_reference, path = tempdir())
# by sound file
feature_reference(reference = lbh_reference, by.sound.file = TRUE)
FUN <- "feature_acoustic_data"
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
library(tools)
file_ext
fe <- function (x)
{
pos <- regexpr("\\.([[:alnum:]]+)$", x)
ifelse(pos > -1L, substring(x, pos + 1L), "")
}
fe("marce.wav")
fe("marce.wav.stream")
fe("marce.wav.streamasdasdasdasdasdasdasd")
path = tempdir()
info_files <- warbleR::info_sound_files(path = path)
info_files
info_files <- warbleR::info_sound_files(path = path, pb = FALSE)
info_files
# save wav file examples
write.sound.files(other.formats = TRUE)
list.files(tempdir(), ".wav")
warbleR::query_xc(qword = "nr:154074", download = TRUE, path = tempdir())
list.files(tempdir())
list.files(tempdir(), ".wav|.pm3")
list.files(tempdir(), ".wav|.mp3")
info_files <- warbleR::info_sound_files(path = path, pb = FALSE)
info_files
cat(crayon::cyan(paste("Features of the acoustic data set in", crayon::bold(normalizePath(path), paste(" \n")))))
cat(crayon::silver(paste("Features of the acoustic data set in", crayon::bold(normalizePath(path), paste(" \n")))))
cat(crayon::silver(paste("Features of the acoustic data set in", crayon::bold(normalizePath(path), paste(": \n")))))
cat(crayon::silver(paste("Features of the acoustic data set in", crayon::bold(paste(normalizePath(path), ": \n")))))
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(normalizePath(path), ": \n"))))
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(normalizePath(path), ": \n"))))
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(paste0(normalizePath(path), ": \n")))))
cat(crayon::silver(paste("\n* A data frame ('max.xcorr.matrix') with the highest correlation value for each pair of templates and surveys \n")))
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(paste0(normalizePath(path), ": \n")))))
cat(crayon::silver(paste("\n* ", )))
cat(crayon::silver(paste("\n* ", nrow(info_files), "sound files")))
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(paste0(normalizePath(path), ": \n")))))
cat(crayon::silver(paste("\n* ", nrow(info_files), "sound files")))
pos <- regexpr("\\.([[:alnum:]]+)$", x)
ifelse(pos > -1L, substring(x, pos + 1L), "")
x <- info_files
pos <- regexpr("\\.([[:alnum:]]+)$", x)
ifelse(pos > -1L, substring(x, pos + 1L), "")
x <- info_files$sound.files
pos <- regexpr("\\.([[:alnum:]]+)$", x)
ifelse(pos > -1L, substring(x, pos + 1L), "")
ifelse(pos > -1L, substring(x, pos + 1L), "")
pos <- regexpr("\\.([[:alnum:]]+)$", info_files$sound.files)
extensions <- ifelse(pos > -1L, substring(info_files$sound.files, pos + 1L), "")
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(paste0(normalizePath(path), ": \n")))))
info_files <- warbleR::info_sound_files(path = path, pb = FALSE)
pos <- regexpr("\\.([[:alnum:]]+)$", info_files$sound.files)
extensions <- ifelse(pos > -1L, substring(info_files$sound.files, pos + 1L), "")
cat(crayon::silver(paste("\n* ", length(unique(extensions)), "file format(s)")))
table(extensions)
tab_ext <- table(extensions)
paste(tab_ext, names(tab_ext))
extensions <- paste0(".", extensions)
tab_ext <- table(extensions)
paste(tab_ext, names(tab_ext))
tab_ext <- paste(tab_ext, names(tab_ext))
tab_ext <- paste(tab_ext, collapse =  ",")
tab_ext
tab_ext <- table(extensions)
tab_ext <- paste(tab_ext, names(tab_ext))
tab_ext <- paste(tab_ext, collapse =  ", ")
tab_ext
tab_ext <- paste(tab_ext, collapse =  ", ")
tab_ext
extensions <- tolower(extensions)
extensions <- paste0(".", extensions)
tab_ext <- table(extensions)
tab_ext <- paste(tab_ext, names(tab_ext))
tab_ext <- paste(tab_ext, collapse =  ", ")
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(paste0(normalizePath(path), ": \n")))))
cat(crayon::silver(paste("\n* ", nrow(info_files), "sound files")))
cat(crayon::silver(paste0("\n* ", length(unique(extensions)), "file format(s)", "(", tab_ext, ")")))
info_files <- warbleR::info_sound_files(path = path, pb = FALSE)
pos <- regexpr("\\.([[:alnum:]]+)$", info_files$sound.files)
extensions <- ifelse(pos > -1L, substring(info_files$sound.files, pos + 1L), "")
extensions <- tolower(extensions)
extensions <- paste0(".", extensions)
tab_ext <- table(extensions)
tab_ext <- paste(tab_ext, names(tab_ext))
tab_ext <- paste(tab_ext, collapse =  ", ")
cat(crayon::silver(paste0("Features of the acoustic data set in ", crayon::bold(paste0(normalizePath(path), ": \n")))))
cat(crayon::silver(paste("\n* ", nrow(info_files), "sound files")))
cat(crayon::silver(paste0("\n* ", length(unique(extensions)), "file format(s)", "(", tab_ext, ")")))
extensions
if ( length(unique(extensions)) > 1)
cat(crayon::red(paste0("\n* ", length(unique(extensions)), " file format(s)", "(", tab_ext, ")"))) else
cat(crayon::silver(paste0("\n* ", length(unique(extensions)), " file format(s)", "(", tab_ext, ")")))
# sampling rates
tab_sr <- table(info_files$sample.rate)
tab_sr <- paste(tab_sr, names(tab_sr))
tab_sr
tab_sr <- paste(tab_sr, names(tab_sr), "kHz")
# sampling rates
tab_sr <- table(info_files$sample.rate)
tab_sr <- paste(tab_sr, names(tab_sr), "kHz")
tab_sr <- paste(tab_sr, collapse =  "; ")
format_message <- paste0("\n* ", length(unique(info_files$sample.rate)), " file format(s)", "(", tab_sr, ")")
if ( length(unique(info_files$sample.rate)) > 1)
cat(crayon::red(format_message)) else
cat(crayon::red(format_message))
# bit depths
tab_bd <- table(info_files$bits)
tab_bd <- paste(tab_bd, names(tab_bd), "kHz")
# bit depths
tab_bd <- table(info_files$bits)
tab_bd <- paste(tab_bd, names(tab_bd), "bits")
tab_bd <- paste(tab_bd, collapse =  "; ")
bd_message <- paste0("\n* ", length(unique(info_files$bits)), " file format(s) ", "(", tab_bd, ")")
if ( length(unique(info_files$bd)) > 1)
cat(crayon::red(bd_message)) else
cat(crayon::red(bd_message))
length(unique(info_files$bd))
bd_message <- paste0("\n* ", length(unique(info_files$bits)), " file format(s) ", "(", tab_bd, ")")
if ( length(unique(info_files$bits)) > 1)
cat(crayon::red(bd_message)) else
cat(crayon::red(bd_message))
length(unique(info_files$bits))
sr_message <- paste0("\n* ", length(unique(info_files$sample.rate)), " file format(s) ", "(", tab_sr, ")")
if ( length(unique(info_files$sample.rate)) > 1)
cat(crayon::red(sr_message)) else
cat(crayon::silver(sr_message))
# bit depths
tab_bd <- table(info_files$bits)
tab_bd <- paste(tab_bd, names(tab_bd), "bits")
tab_bd <- paste(tab_bd, collapse =  "; ")
bd_message <- paste0("\n* ", length(unique(info_files$bits)), " file format(s) ", "(", tab_bd, ")")
if (length(unique(info_files$bits)) > 1)
cat(crayon::red(bd_message)) else
cat(crayon::silver(bd_message))
# formats
pos <- regexpr("\\.([[:alnum:]]+)$", info_files$sound.files)
extensions <- ifelse(pos > -1L, substring(info_files$sound.files, pos + 1L), "")
extensions <- tolower(extensions)
extensions <- paste0(".", extensions)
tab_ext <- table(extensions)
tab_ext <- paste0(names(tab_ext), " (", tab_ext, ")")
tab_ext <- paste(tab_ext, collapse =  "; ")
format_message <- paste0("\n* ", length(unique(extensions)), " file format(s) ", "(", tab_ext, ")")
if ( length(unique(extensions)) > 1)
cat(crayon::red(format_message)) else
cat(crayon::silver(format_message))
# bit depths
tab_bd <- table(info_files$bits)
tab_bd <- paste0(names(tab_bd), "bits ", " (", tab_bd, ")")
tab_bd <- paste(tab_bd, collapse =  "; ")
bd_message <- paste0("\n* ", length(unique(info_files$bits)), " file format(s) ", "(", tab_bd, ")")
if (length(unique(info_files$bits)) > 1)
cat(crayon::red(bd_message)) else
cat(crayon::silver(bd_message))
# bit depths
tab_bd <- table(info_files$bits)
tab_bd <- paste0(names(tab_bd), "bits", " (", tab_bd, ")")
tab_bd <- paste(tab_bd, collapse =  "; ")
bd_message <- paste0("\n* ", length(unique(info_files$bits)), " file format(s) ", "(", tab_bd, ")")
if (length(unique(info_files$bits)) > 1)
cat(crayon::red(bd_message)) else
cat(crayon::silver(bd_message))
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
# bit depths
tab_bd <- table(info_files$bits)
tab_bd <- paste0(names(tab_bd), "bits", " (", tab_bd, ")")
tab_bd <- paste(tab_bd, collapse =  "; ")
bd_message <- paste0("\n* ", length(unique(info_files$bits)), " file format(s) ", "(", tab_bd, ")")
if (length(unique(info_files$bits)) > 1)
cat(crayon::red(bd_message)) else
cat(crayon::silver(bd_message))
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
round(mean(info_files$duration), 2)
# duration
dur_message <- paste0("\n* Range of file duration:", round(min(info_files$duration), 2), "-", round(max(info_files$duration), 2), "s (mean : ", round(mean(info_files$duration), 2), " )")
cat(crayon::silver(dur_message))
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
info_files
# number of channels
tab_bd <- table(info_files$channels)
# number of channels
tab_ch <- table(info_files$channels)
tab_ch <- paste0(names(tab_ch), "number of channels", " (", tab_ch, ")")
tab_ch <- paste(tab_ch, collapse =  "; ")
ch_message <- paste0("\n* ", length(unique(info_files$channels)), " bit depth(s) ", "(", tab_ch, ")")
if (length(unique(info_files$channels)) > 1)
cat(crayon::red(ch_message)) else
cat(crayon::silver(ch_message))
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
info_files
open_wd(tempdir())
file.size(tempdir())
file <- file.info("/tmp/RtmpAWMpu4/Phaethornis-striigularis-154074.mp3")
file <- file[!file$isdir,"size"]
file
file / 1048576
file / 1024
file / 1048576
28.6064453 * 1024
28.6064453 * 1024 / 1048576
28.6064453 * 10.24 / 1048576
28.6064453 * 102400 / 1048576
file.info("/tmp/RtmpAWMpu4/Phaethornis-striigularis-154074.mp3")
file.size("/tmp/RtmpAWMpu4/Phaethornis-striigularis-154074.mp3")
file.size(file.path(path, info_files$sound.files))
file.size(file.path(path, info_files$sound.files)) / 1048576
file.size(file.path(path, info_files$sound.files)) / 1000000
info_files$wav.size <- file.size(file.path(path, info_files$sound.files)) / 1000000
info_files
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir())
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
source("~/Dropbox/R_package_testing/ohun/R/feature_acoustic_data.R")
feature_acoustic_data(path = tempdir(), 3)
FUN <- "label_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
write.sound.files()
# EXAMPLES
lsr <- selection_table(lbh_reference, path = tempdir())
# an extra one in detection (1 false positive)
label_detection(reference = lsr[-1, ], detection = lsr)
# missing one in detection (all true positives)
label_detection(reference = lsr, detection = lsr[-1, ])
# perfect detection (all true positives)
label_detection(reference = lsr, detection = lsr)
# and extra sound file in reference (all true positives)
label_detection(reference = lsr, detection = lsr[lsr$sound.files != "Phae.long1.wav", ])
data("lbh_reference")
# EXAMPLES
lsr <- selection_table(lbh_reference, path = tempdir())
lsr
# an extra one in detection (1 false positive)
label_detection(reference = lsr[-1, ], detection = lsr)
# an extra one in detection (1 false positive)
as.data.frame(label_detection(reference = lsr[-1, ], detection = lsr))
# perfect detection (all true positives)
label_detection(reference = lsr, detection = lsr)
ref <- lbh_reference
ref
ref$end[1] <- 0.7
as.data.frame(label_detection(reference = ref, detection = ref))
as.data.frame(label_detection(reference = ref[-1, ], detection = ref))
source("~/Dropbox/R_package_testing/ohun/R/find_overlaps.R")
detection = ref
