}
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_selec_reference
lbh_selec2
lbh_selec2[11,]
lbh_selec2$end[11]
lbh_selec2$end[11] <- 1.53
dd <- diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2
lbh_selec2$end[11] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2$end[11] <- 1.53
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2
lbh_selec2$end[12] <- 1.53
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2$end[11] <- 1.53
lbh_selec2$end[12] <- 1.53
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2$end[11] <- 1.53
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2$end[12] <- 1.53
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
diagnose_detection(reference = lbh_selec2[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec2$end[11] <- 1.53
lbh_selec2$end[12] <- 1.53
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
reference = lbh_selec2
detection = lbh_selec_reference
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE)
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = TRUE)
time.diagnostics = FALSE
# remove row with no info
detection <- detection[!is.na(detection$start), ]
# double checking happens inside label_detection()
labeled_detection <- label_detection(reference = reference, detection = detection, parallel = parallel, pb = pb)
# # add row labels to reference for getting false negatives
reference$..row.id <- 1:nrow(reference)
# duration of corresponding selection in reference
labeled_detection$reference.duration <- sapply(1:nrow(labeled_detection), function(x){
if (is.na(labeled_detection$reference.row[x])) NA  else
if (grepl("-", labeled_detection$reference.row[x]))  NA else
labeled_detection$end[x] - labeled_detection$start[x]
})
# look at detections matching 1 training selection at the time
performance_list <- lapply(unique(labeled_detection$sound.files), function(z){
# get subset for that sound file
sub_detec <- labeled_detection[labeled_detection$sound.files == z, ]
sub_ref <- reference[reference$sound.files == z, ]
# get row index in reference for detected signals
detected_reference_rows <- unlist(sapply(sub_detec$reference.row, function(x) unlist(strsplit(x, "-")), USE.NAMES = FALSE))
performance <- data.frame(
sound.files = z,
true.positives = sum(grepl("true", sub_detec$detection.class)),
false.positives = sum(grepl("false", sub_detec$detection.class)),
false.negatives = sum(!sub_ref$..row.id %in% detected_reference_rows),
split.positives = sum(grepl("split", sub_detec$detection.class)) / 2,
merged.positives = sum(grepl("merge", sub_detec$detection.class)),
mean.duration.true.positives = mean((sub_detec$end - sub_detec$start)[grep("true", sub_detec$detection.class)]),
mean.duration.false.positives = mean((sub_detec$end - sub_detec$start)[grep("false", sub_detec$detection.class)]),
mean.duration.false.negatives = mean((sub_ref$end - sub_ref$start)[!sub_ref$..row.id %in% detected_reference_rows]),
proportional.duration.true.positives = mean(sub_detec$reference.duration, na.rm = TRUE) / mean((sub_ref$end - sub_ref$start)[sub_ref$..row.id %in% detected_reference_rows], na.rm = TRUE),
sensitivity = sum(!is.na(unique(detected_reference_rows))) / nrow(sub_ref),
specificity =  if (nrow(sub_detec) > 0) sum(!is.na(unique(detected_reference_rows))) / (nrow(sub_ref) + sum(grep("false", sub_detec$detection.class))) else 0,
stringsAsFactors = FALSE
)
# replace NaNs with NA
for(i in 1:ncol(performance))
if (is.nan(performance[, i])) performance[, i] <- NA
# fix values when no false positives or true positives
performance$false.positives[performance$false.positives < 0] <- 0
performance$mean.duration.false.positives[is.na(performance$mean.duration.false.positives) | performance$false.positives == 0] <- NA
performance$mean.duration.true.positives[is.na(performance$mean.duration.true.positives) | performance$true.positives == 0] <- NA
# make sensitvities higher than 1 (because of split positives) 1
performance$sensitivity[performance$sensitivity > 1] <- 1
return(performance)
})
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
unique(labeled_detection$sound.files)
z <- "Phae.long4.wav"
# get subset for that sound file
sub_detec <- labeled_detection[labeled_detection$sound.files == z, ]
sub_ref <- reference[reference$sound.files == z, ]
# get row index in reference for detected signals
detected_reference_rows <- unlist(sapply(sub_detec$reference.row, function(x) unlist(strsplit(x, "-")), USE.NAMES = FALSE))
performance <- data.frame(
sound.files = z,
true.positives = sum(grepl("true", sub_detec$detection.class)),
false.positives = sum(grepl("false", sub_detec$detection.class)),
false.negatives = sum(!sub_ref$..row.id %in% detected_reference_rows),
split.positives = sum(grepl("split", sub_detec$detection.class)) / 2,
merged.positives = sum(grepl("merge", sub_detec$detection.class)),
mean.duration.true.positives = mean((sub_detec$end - sub_detec$start)[grep("true", sub_detec$detection.class)]),
mean.duration.false.positives = mean((sub_detec$end - sub_detec$start)[grep("false", sub_detec$detection.class)]),
mean.duration.false.negatives = mean((sub_ref$end - sub_ref$start)[!sub_ref$..row.id %in% detected_reference_rows]),
proportional.duration.true.positives = mean(sub_detec$reference.duration, na.rm = TRUE) / mean((sub_ref$end - sub_ref$start)[sub_ref$..row.id %in% detected_reference_rows], na.rm = TRUE),
sensitivity = sum(!is.na(unique(detected_reference_rows))) / nrow(sub_ref),
specificity =  if (nrow(sub_detec) > 0) sum(!is.na(unique(detected_reference_rows))) / (nrow(sub_ref) + sum(grep("false", sub_detec$detection.class))) else 0,
stringsAsFactors = FALSE
)
performance
sum(grepl("split", sub_detec$detection.class))
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
lbh_selec2$end[11] <- 1
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
#Creating vector for duration
durs <- rep(c(0.5, 1), 5)
#Creating simulated song
set.seed(10)
ss1 <- simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, selec.table = TRUE, file.name = "ss1", harms = 1, bgn = 0.1, path = tempdir())
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-45, 0, 5), fastdisp = TRUE, flim = c(0, 10))
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-45, 0, 5), fastdisp = TRUE, flim = c(0, 10), grid = FALSE)
#Detecting all elements
sim_ad <- ernergy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 50, mindur = 0.001, path = tempdir())
remove.packages("ohun")
install.packages("ohun")
devtools::install_github("maRce10/ohun")
library(ohun)
# install this package first if not available
# install.packages(" Sim.DiffProc")
#Creating vector for duration
durs <- rep(c(0.5, 1), 5)
#Creating simulated song
set.seed(10)
ss1 <- simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, selec.table = TRUE, file.name = "ss1", harms = 1, bgn = 0.1, path = tempdir())
#Detecting all elements
sim_ad <- ernergy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 50, mindur = 0.001, path = tempdir())
library(ohun)
#Detecting all elements
sim_ad <- ernergy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 50, mindur = 0.001, path = tempdir())
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 50, mindur = 0.001, path = tempdir())
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 50, min.duration = 0.001, path = tempdir())
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 0.5, min.duration = 0.001, path = tempdir())
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 0.5, min.duration = 0.001, path = tempdir(), pb = FALSE)
# plot spectro
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-45, 0, 5), fastdisp = TRUE, flim = c(0, 10))
# plot detections
for(e in 1:nrow(sim_ad))
polygon(x = rep(c(sim_ad$start[e], sim_ad$end[e]),
each = 2), y = c(0, 10, 10, 0), lty = 2, border = "#07889B",
col = adjustcolor("#07889B", alpha.f = 0.12),
lwd = 1.2)
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 0.5, path = tempdir(), pb = FALSE)
# plot spectro
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-45, 0, 5), fastdisp = TRUE, flim = c(0, 10))
# plot detections
for(e in 1:nrow(sim_ad))
polygon(x = rep(c(sim_ad$start[e], sim_ad$end[e]),
each = 2), y = c(0, 10, 10, 0), lty = 2, border = "#07889B",
col = adjustcolor("#07889B", alpha.f = 0.12),
lwd = 1.2)
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-45, 0, 5), fastdisp = TRUE, flim = c(0, 10))
abline(v = c(ad$start, ad$end))
#Change in minimum duration to one that is longer than the elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 0.5, min.duration = 1.5, path = tempdir(), pb = FALSE)
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-50, 0, 5), fastdisp = TRUE, flim = c(0, 10))
for(e in 1:nrow(sim_ad))
polygon(x = rep(c(sim_ad$start[e], sim_ad$end[e]),
each = 2), y = c(0, 10, 10, 0), lty = 2, border = "#07889B",
col = adjustcolor("#07889B", alpha.f = 0.12),
lwd = 1.2)
sim_ad
#Change in minimum duration to one that is longer than the elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 0.5, min.duration = 0.7, path = tempdir(), pb = FALSE)
spectro(ss1$wave, osc = FALSE, scale = FALSE, collevels = seq(-50, 0, 5), fastdisp = TRUE, flim = c(0, 10))
for(e in 1:nrow(sim_ad))
polygon(x = rep(c(sim_ad$start[e], sim_ad$end[e]),
each = 2), y = c(0, 10, 10, 0), lty = 2, border = "#07889B",
col = adjustcolor("#07889B", alpha.f = 0.12),
lwd = 1.2)
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(1, 8), ssmooth = 10, threshold = 0.5, max.duration = 0.6, path = tempdir(), pb = FALSE)
spectro(ss1$wave, osc = FALSE, scale = FALSE, main = Sys.time(), collevels = seq(-50, 0, 5), fastdisp = TRUE, flim = c(0, 10))
for(e in 1:nrow(sim_ad))
polygon(x = rep(c(sim_ad$start[e], sim_ad$end[e]),
each = 2), y = c(0, 10, 10, 0), lty = 2, border = "#07889B",
col = adjustcolor("#07889B", alpha.f = 0.12),
lwd = 1.2)
#Detecting all elements
sim_ad <- energy_detector(files = ss1$selec.table$sound.files[1], bp = c(5, 8), ssmooth = 10, threshold = 0.5, min.duration = 0.0001, path = tempdir(), pb = FALSE)
spectro(ss1$wave, osc = FALSE, scale = FALSE, main = Sys.time(), collevels = seq(-50, 0, 5), fastdisp = TRUE, flim = c(0, 10))
for(e in 1:nrow(sim_ad))
polygon(x = rep(c(sim_ad$start[e], sim_ad$end[e]),
each = 2), y = c(0, 10, 10, 0), lty = 2, border = "#07889B",
col = adjustcolor("#07889B", alpha.f = 0.12),
lwd = 1.2)
FUN <- "optimize_energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, by.sound.file = TRUE)
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, by.sound.file = FALSE)
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8, time.diagnostics = FASLE,
bp = c(2, 9), min.duration = 0.09, by.sound.file = FALSE)
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8, time.diagnostics = FALSE,
bp = c(2, 9), min.duration = 0.09, by.sound.file = FALSE)
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, by.sound.file = FALSE)
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8,
bp = c(2, 9), min.duration = c(0.09, 0.1), by.sound.file = FALSE)
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
load_all()
# devtools::install()
x <- c("devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "microbenchmark", "pkgdown")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
rm(list = ls())
load_all()
# run internals
run_ohun_int <- function(){
out <- lapply(list.files(pattern = "ohun_int", path = "./R", full.names = T), source)}
# open working directory
open.wd <- function() system(paste("nautilus", getwd()), show.output.on.console = F)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a warbleR function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = TRUE, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE)
{
rfiles <- list.files(pattern = file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE){
rfiles <- list.files(pattern =file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, selection.table = FALSE){
# setwd(path)
data(lbh_selec_table, package = "warbleR")
tuneR::writeWave(NatureSounds::Phae.long2, file.path(tempdir(),  "Phae.long2.wav"), extensible = extensible) #save sound files
tuneR::writeWave(NatureSounds::Phae.long1, file.path(tempdir(), "Phae.long1.wav"), extensible = extensible)
tuneR::writeWave(NatureSounds::Phae.long3, file.path(tempdir(), "Phae.long3.wav"), extensible = extensible) #save sound files
tuneR::writeWave(NatureSounds::Phae.long4, file.path(tempdir(), "Phae.long4.wav"), extensible = extensible)
if (other.formats){
file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
wav2flac(file.path(tempdir(), "Phae.long5.wav"))
if (selection.table){
lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
# fix times
sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
return(sub_tab)
} else return(NULL)
}
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
spectro_analysis(detec1)
spectro_analysis(detec1, flim = c(1, 10))
spectro_analysis(detec1, bp = c(1, 10))
spectro_analysis(detec1, bp = c(1, 10), path = tempdir())
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
sp <- spectro_analysis(detec1, bp = c(1, 10), path = tempdir())
View(sp)
View(sp)
#
par(mar = c(5, 4, 2, 2) + 0.1)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
