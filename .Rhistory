source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# setwd(tempdir())
#open in rstudio
##open.fun(fun = FUN)
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_selec_reference
lbh_selec2$end[11] <- 1
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
#'  \item \code{proportional.overlap.true.positives}: ratio of the time overlap of true positives in 'detection' with its corresponding reference signal to the duration of the reference signal.
#'  \item \code{proportional.duration.true.positives}: ratio of duration of true positives to th duration of signals in 'reference'. In a perfect detection routine it should be 1. Based only on true positives that were not split or merged
#'  \item \code{sensitivity}: Proportion of signals in 'reference' that were detected. In a perfect detection routine it should be 1.
#'  \item \code{specificity}: Proportion of detections that correspond to signals in 'reference' that were detected. In a perfect detection routine it should be 1.
#'  }
#' @export
#' @name diagnose_detection
#' @details The function evaluates the performance of a signal detection procedure by comparing its output selection table to a reference selection table in which all signals of interest have been selected.
#' @examples {
#' # perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ])
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference)
# with time diagnostics
diagnose_detection(reference = lbh_selec_reference[-1, ],
detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference,
detection =
lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ])
# and extra sound file in detection
diagnose_detection(reference =
lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ],
detection = lbh_selec_reference)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference =
lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ],
detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
#'
#' }
#' @seealso \code{\link{optimize_auto_detec}}, \code{\link{optimize_find_peaks}}
#' @author Marcelo Araya-Salas \email{marcelo.araya@@ucr.ac.cr})
#'
#' @references {
#' Araya-Salas, M. (2021), ohun: automatic detection of acoustic signals. R package version 0.1.0.
#' }
# last modification on jul-16-2021 (MAS)
diagnose_detection <- function(reference, detection, by.sound.file = FALSE, time.diagnostics = FALSE, parallel = 1, pb = TRUE)
#'  \item \code{proportional.overlap.true.positives}: ratio of the time overlap of true positives in 'detection' with its corresponding reference signal to the duration of the reference signal.
#'  \item \code{proportional.duration.true.positives}: ratio of duration of true positives to th duration of signals in 'reference'. In a perfect detection routine it should be 1. Based only on true positives that were not split or merged
#'  \item \code{sensitivity}: Proportion of signals in 'reference' that were detected. In a perfect detection routine it should be 1.
#'  \item \code{specificity}: Proportion of detections that correspond to signals in 'reference' that were detected. In a perfect detection routine it should be 1.
#'  }
#' @export
#' @name diagnose_detection
#' @details The function evaluates the performance of a signal detection procedure by comparing its output selection table to a reference selection table in which all signals of interest have been selected.
#' @examples {
#' # perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ])
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference)
# with time diagnostics
diagnose_detection(reference = lbh_selec_reference[-1, ],
detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference,
detection =
lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ])
# and extra sound file in detection
diagnose_detection(reference =
lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ],
detection = lbh_selec_reference)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference =
lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ],
detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
#'
#' }
#' @seealso \code{\link{optimize_auto_detec}}, \code{\link{optimize_find_peaks}}
#' @author Marcelo Araya-Salas \email{marcelo.araya@@ucr.ac.cr})
#'
#' @references {
#' Araya-Salas, M. (2021), ohun: automatic detection of acoustic signals. R package version 0.1.0.
#' }
# last modification on jul-16-2021 (MAS)
diagnose_detection <- function(reference, detection, by.sound.file = FALSE, time.diagnostics = FALSE, parallel = 1, pb = TRUE)
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ])
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ])
lbh_selec_reference
lbh_selec_reference[-1, ]
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ])
detection
dt
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_selec_reference
lbh_selec2$end[11] <- 1
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
is.selection_table
is.selection_table
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
load_all()
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_selec_reference
lbh_selec2$end[11] <- 1
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
# using smoothing and minimum duration
detec1 <- energy_detector(path = tempdir(), threshold = 0.07,
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09, ssmooth = 7)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
# using hold time
detec2 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.10, hold.time = 0.15,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec2, time.diagnostics = TRUE)
detec3 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.10, hold.time = 0.15, min.duration = 0.05,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec3, time.diagnostics = TRUE)
# calculate envelopes first
envs <- get_envelopes(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"),
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# run detection
detec <- energy_detector(envelopes = envs, threshold = 0.10, hold.time = 0.15, min.duration = 0.05)
envs
envelopes = envs
threshold = 0.10
hold.time = 0.15
min.duration = 0.05
envelopes$call_info$call
eval(rlang::call_args(envelopes$call_info$call)$path)
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
# run detection
detec <- energy_detector(envelopes = envs, threshold = 0.10, hold.time = 0.15, min.duration = 0.05)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
path = tempdir()
path
is.null(envelopes)
is.call(tempdir())
is.call(call_args(envelopes$call_info$call)$path)
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
FUN <- "label_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# an extra one in detection (1 false positive)
label_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference)
# missing one in detection (all true positives)
label_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ])
# perfect detection (all true positives)
label_detection(reference = lbh_selec_reference, detection = lbh_selec_reference)
# and extra sound file in reference (all true positives)
label_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ])
# and extra sound file in detection (some false positives)
label_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference)
# duplicate 1 detection row (to get 2 splits)
label_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[c(1, 1:nrow(lbh_selec_reference)), ])
# merge 2 detections (to get split and merge)
Y <- lbh_selec_reference
Y$end[1] <- 1.2
label_detection(reference = lbh_selec_reference, detection = Y)
# remove split to get only merge
Y <- Y[-2, ]
label_detection(reference = lbh_selec_reference, detection = Y)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_selec_reference
lbh_selec2$end[11] <- 1
lbh_selec2$end[12] <- 1
diagnose_detection(reference = lbh_selec2, detection = lbh_selec_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
# using smoothing and minimum duration
detec1 <- energy_detector(path = tempdir(), threshold = 0.07,
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09, ssmooth = 7)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
# using hold time
detec2 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.10, hold.time = 0.15,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec2, time.diagnostics = TRUE)
detec3 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.10, hold.time = 0.15, min.duration = 0.05,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec3, time.diagnostics = TRUE)
# calculate envelopes first
envs <- get_envelopes(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"),
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# run detection
detec <- energy_detector(envelopes = envs, threshold = 0.10, hold.time = 0.15, min.duration = 0.05)
detec <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.1, hold.time = 0.15, min.duration = 0.05, path = tempdir(),
bp = c(2, 9), hop.size = 6.8,)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)
detec
# no files or envelopes
detec <- energy_detector(threshold = 0.10, hold.time = 0.15, min.duration = 0.05, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)
# convert files to flac
warbleR::wav_2_flac(path = tempdir())
# change sound file extension to flac
flac_reference <- lbh_selec_reference
flac_reference$sound.files <- gsub(".wav", ".flac", flac_reference$sound.files)
detec4 <- energy_detector(files = c("Phae.long1.flac",  "Phae.long2.flac", "Phae.long3.flac", "Phae.long4.flac"), path = tempdir(), threshold = 0.06, ssmooth = 6.8,
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
# diagnose detection
diagnose_detection(reference = flac_reference, detection = detec4)
diagnose_detection(reference = flac_reference, detection = detec4)
detec4
flac_reference
diagnose_detection(reference = flac_reference, detection = detec4)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
