#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, simulated = FALSE){
# setwd(path)
data(lbh1, package = "ohun")
data(lbh2, package = "ohun")
tuneR::writeWave(lbh1, file.path(tempdir(),  "lbh1.wav"), extensible = extensible) #save sound files
tuneR::writeWave(lbh2, file.path(tempdir(),  "lbh2.wav"), extensible = extensible) #save sound files
if (simulated){
# Creating vector for duration
durs <- rep(c(0.3, 1), 5)
# Creating simulated song
set.seed(12)
simulated_1 <- warbleR::simulate_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_1", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18)
sim_2 <- sim_songs(n = 10, durs = durs, freqs = 5, sig2 = 0.01, gaps = 0.5, harms = 1, bgn = 0.1, path = tempdir(), file.name = "simulated_2", selec.table = TRUE, shape = "cos", fin = 0.3, fout = 0.35, samp.rate = 18, am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1))
sel_tab2 <- sel_tab1 <- simulated_1$selec.table
sel_tab2$sound.files <- gsub("_1", "_2", sel_tab2$sound.files)
sel_tab <- rbind(sel_tab1, sel_tab2)
return(sel_tab)
}
# if (other.formats){
#   file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
#
# file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
#
#   file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
#
# wav2flac(file.path(tempdir(), "Phae.long5.wav"))
#
# if (selection.table){
#
#   lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
#
#   sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
#
#   sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
#
#     sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
#
#     # fix times
#      sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
#
#      sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
#
#
#     sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
#
#     sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
#
#     sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
#
#
#     return(sub_tab)
# } else return(NULL)
# }
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
# missing one in detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ], time.diagnostics = TRUE)
# missing one in detection
performance_df <- diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ], time.diagnostics = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# missing one in detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ], time.diagnostics = TRUE)
cc# an extra one in detection
# an extra one in detection
diagnose_detection(reference = lbh_reference[-1, ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_reference, detection = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# with path
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE, path = tempdir())
# get summary
summarize_diagnostic(dd)
# merged detection
lbh_selec2 <- lbh_reference
lbh_selec2$end[11] <- 3
lbh_selec2$end[12] <- 3
diagnose_detection(reference = lbh_selec2, detection = lbh_reference, time.diagnostics = FALSE, by.sound.file = TRUE)
# with path
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE, path = tempdir())
# get summary
summarize_diagnostic(dd)
dd
source("~/Dropbox/R_package_testing/ohun/R/summarize_diagnostic.R")
# get summary
summarize_diagnostic(dd)
FUN <- "summarize_diagnostic"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
data("lbh_reference")
# save wav file examples
write.sound.files()
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
load_all()
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
source("~/Dropbox/R_package_testing/ohun/R/summarize_diagnostic.R")
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
reference = lbh_reference
detection = lbh_reference
time.diagnostics = TRUE
by.sound.file = FALSE
parallel = 1
pb = TRUE
path = NULL
# make it a data frame if selection table
if (warbleR::is_selection_table(detection))
detection <- as.data.frame(detection)
# make it a data frame if selection table
if (warbleR::is_selection_table(reference))
reference <- as.data.frame(reference)
# remove rows with no info
detection <- detection[!is.na(detection$start), ]
if (nrow(detection) > 0)
{
# double checking happens inside label_detection()
labeled_detection <- label_detection(reference = reference, detection = detection, parallel = parallel, pb = pb)
# # add row labels to reference for getting false negatives
reference$..row.id <- 1:nrow(reference)
# duration of corresponding selection in reference
labeled_detection$reference.duration <- sapply(1:nrow(labeled_detection), function(x){
if (is.na(labeled_detection$reference.row[x])) NA  else
if (grepl("-", labeled_detection$reference.row[x]))  NA else
reference$end[as.numeric(labeled_detection$reference.row[x])] - reference$start[as.numeric(labeled_detection$reference.row[x])]
})
# look at detections matching 1 training selection at the time
performance_list <- lapply(unique(labeled_detection$sound.files), function(z){
# get subset for that sound file
sub_detec <- labeled_detection[labeled_detection$sound.files == z, ]
sub_ref <- reference[reference$sound.files == z, ]
# get row index in reference for detected signals
detected_reference_rows <- unique(na.omit(unlist(lapply(sub_detec$reference.row, function(x) unlist(strsplit(as.character(x), "-"))))))
performance <- data.frame(
sound.files = z,
true.positives = length(detected_reference_rows),
false.positives = sum(grepl("false", sub_detec$detection.class)),
false.negatives = sum(!sub_ref$..row.id %in% detected_reference_rows),
split.positives = length(unique(
unlist(lapply(sub_detec$reference.row[grepl("split)", sub_detec$detection.class)], function(x) unlist(strsplit(x, "-")))))),
merged.positives = sum(grepl("merge", sub_detec$detection.class)),
mean.duration.true.positives = mean((sub_detec$end - sub_detec$start)[grep("true", sub_detec$detection.class)]),
mean.duration.false.positives = mean((sub_detec$end - sub_detec$start)[grep("false", sub_detec$detection.class)]),
mean.duration.false.negatives = mean((sub_ref$end - sub_ref$start)[!sub_ref$..row.id %in% detected_reference_rows]),
overlap.to.true.positives = if(any(!is.na(sub_detec$overlap))) mean(sub_detec$overlap, na.rm = TRUE) else NA,
proportional.duration.true.positives = mean(sub_detec$reference.duration, na.rm = TRUE) / mean((sub_ref$end - sub_ref$start)[sub_ref$..row.id %in% detected_reference_rows], na.rm = TRUE),
stringsAsFactors = FALSE
)
# add duty cycle
if (!is.null(path) & time.diagnostics){
# get file durations
performance$duty.cycle <- sum((sub_detec$end - sub_detec$start), na.rm = TRUE) / warbleR::duration_sound_files(files = z, path = path)$duration
}
# add recall and precision
performance$recall <- length(detected_reference_rows) / nrow(sub_ref)
performance$precision <-  if (nrow(sub_detec) > 0 & length(detected_reference_rows) > 0) length(detected_reference_rows) / (nrow(sub_ref) + sum(grep("false", sub_detec$detection.class))) else 0
# replace NaNs with NA
for(i in 1:ncol(performance))
if (is.nan(performance[, i])) performance[, i] <- NA
# fix values when no false positives or true positives
performance$false.positives[performance$false.positives < 0] <- 0
performance$mean.duration.false.positives[is.na(performance$mean.duration.false.positives) | performance$false.positives == 0] <- NA
performance$mean.duration.true.positives[is.na(performance$mean.duration.true.positives) | performance$true.positives == 0] <- NA
# make sensitvities higher than 1 (because of split positives) 1
performance$recall[performance$recall > 1] <- 1
return(performance)
})
# add diagnostics of files in reference but not in detection
if (any(!reference$sound.files %in% unique(labeled_detection$sound.files))){
no_detec <- data.frame(
sound.files = setdiff(reference$sound.files, unique(labeled_detection$sound.files)),
true.positives = 0,
false.positives = 0,
false.negatives = sapply(setdiff(reference$sound.files, unique(labeled_detection$sound.files)), function(x) sum(reference$sound.files == x)),
split.positives = NA,
merged.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = sapply(setdiff(reference$sound.files, unique(labeled_detection$sound.files)), function(x) mean((reference$end - reference$start)[reference$sound.files == x])),
overlap.to.true.positives = NA,
proportional.duration.true.positives = NA,
recall = 0,
precision =  0,
stringsAsFactors = FALSE
)
# add duty cycle
if (!is.null(path) & time.diagnostics)
no_detec$duty.cycle <- 0
performance_list[[length(performance_list) + 1]] <- no_detec
}
# put in a single data frame
performance_df <- do.call(rbind, performance_list)
} else  {
performance_df <- data.frame(
sound.files = unique(reference$sound.files),
true.positives = 0,
false.positives = 0,
false.negatives = sapply(unique(reference$sound.files), function(x) sum(reference$sound.files == x)),
split.positives = NA,
merged.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = sapply(unique(reference$sound.files), function(x) mean(reference$end - reference$start)),
overlap.to.true.positives = NA,
proportional.duration.true.positives = NA,
recall = 0,
precision =  0,
stringsAsFactors = FALSE
)
# add duty cycle
if (!is.null(path) & time.diagnostics)
performance_df$duty.cycle <- 0
}
# sort columns
performance_df <- performance_df[ , na.omit(match(c("sound.files", "true.positives", "false.positives", "false.negatives", "split.positives", "merged.positives", "mean.duration.true.positives", "mean.duration.false.positives", "mean.duration.false.negatives", "overlap.to.true.positives", "proportional.duration.true.positives", "duty.cycle", "recall", "precision"), names(performance_df)))]
# summarize across sound files
if (!by.sound.file)
performance_df <-
summarize_diagnostic(diagnostic = performance_df, time.diagnostics = time.diagnostics)
performance_df
# remove rows with no info
detection <- detection[!is.na(detection$start), ]
if (nrow(detection) > 0)
{
# double checking happens inside label_detection()
labeled_detection <- label_detection(reference = reference, detection = detection, parallel = parallel, pb = pb)
# # add row labels to reference for getting false negatives
reference$..row.id <- 1:nrow(reference)
# duration of corresponding selection in reference
labeled_detection$reference.duration <- sapply(1:nrow(labeled_detection), function(x){
if (is.na(labeled_detection$reference.row[x])) NA  else
if (grepl("-", labeled_detection$reference.row[x]))  NA else
reference$end[as.numeric(labeled_detection$reference.row[x])] - reference$start[as.numeric(labeled_detection$reference.row[x])]
})
# look at detections matching 1 training selection at the time
performance_list <- lapply(unique(labeled_detection$sound.files), function(z){
# get subset for that sound file
sub_detec <- labeled_detection[labeled_detection$sound.files == z, ]
sub_ref <- reference[reference$sound.files == z, ]
# get row index in reference for detected signals
detected_reference_rows <- unique(na.omit(unlist(lapply(sub_detec$reference.row, function(x) unlist(strsplit(as.character(x), "-"))))))
performance <- data.frame(
sound.files = z,
true.positives = length(detected_reference_rows),
false.positives = sum(grepl("false", sub_detec$detection.class)),
false.negatives = sum(!sub_ref$..row.id %in% detected_reference_rows),
split.positives = length(unique(
unlist(lapply(sub_detec$reference.row[grepl("split)", sub_detec$detection.class)], function(x) unlist(strsplit(x, "-")))))),
merged.positives = sum(grepl("merge", sub_detec$detection.class)),
mean.duration.true.positives = mean((sub_detec$end - sub_detec$start)[grep("true", sub_detec$detection.class)]),
mean.duration.false.positives = mean((sub_detec$end - sub_detec$start)[grep("false", sub_detec$detection.class)]),
mean.duration.false.negatives = mean((sub_ref$end - sub_ref$start)[!sub_ref$..row.id %in% detected_reference_rows]),
overlap.to.true.positives = if(any(!is.na(sub_detec$overlap))) mean(sub_detec$overlap, na.rm = TRUE) else NA,
proportional.duration.true.positives = mean(sub_detec$reference.duration, na.rm = TRUE) / mean((sub_ref$end - sub_ref$start)[sub_ref$..row.id %in% detected_reference_rows], na.rm = TRUE),
stringsAsFactors = FALSE
)
# add duty cycle
if (!is.null(path) & time.diagnostics){
# get file durations
performance$duty.cycle <- sum((sub_detec$end - sub_detec$start), na.rm = TRUE) / warbleR::duration_sound_files(files = z, path = path)$duration
}
# add recall and precision
performance$recall <- length(detected_reference_rows) / nrow(sub_ref)
performance$precision <-  if (nrow(sub_detec) > 0 & length(detected_reference_rows) > 0) length(detected_reference_rows) / (nrow(sub_ref) + sum(grep("false", sub_detec$detection.class))) else 0
# replace NaNs with NA
for(i in 1:ncol(performance))
if (is.nan(performance[, i])) performance[, i] <- NA
# fix values when no false positives or true positives
performance$false.positives[performance$false.positives < 0] <- 0
performance$mean.duration.false.positives[is.na(performance$mean.duration.false.positives) | performance$false.positives == 0] <- NA
performance$mean.duration.true.positives[is.na(performance$mean.duration.true.positives) | performance$true.positives == 0] <- NA
# make sensitvities higher than 1 (because of split positives) 1
performance$recall[performance$recall > 1] <- 1
return(performance)
})
# add diagnostics of files in reference but not in detection
if (any(!reference$sound.files %in% unique(labeled_detection$sound.files))){
no_detec <- data.frame(
sound.files = setdiff(reference$sound.files, unique(labeled_detection$sound.files)),
true.positives = 0,
false.positives = 0,
false.negatives = sapply(setdiff(reference$sound.files, unique(labeled_detection$sound.files)), function(x) sum(reference$sound.files == x)),
split.positives = NA,
merged.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = sapply(setdiff(reference$sound.files, unique(labeled_detection$sound.files)), function(x) mean((reference$end - reference$start)[reference$sound.files == x])),
overlap.to.true.positives = NA,
proportional.duration.true.positives = NA,
recall = 0,
precision =  0,
stringsAsFactors = FALSE
)
# add duty cycle
if (!is.null(path) & time.diagnostics)
no_detec$duty.cycle <- 0
performance_list[[length(performance_list) + 1]] <- no_detec
}
# put in a single data frame
performance_df <- do.call(rbind, performance_list)
} else  {
performance_df <- data.frame(
sound.files = unique(reference$sound.files),
true.positives = 0,
false.positives = 0,
false.negatives = sapply(unique(reference$sound.files), function(x) sum(reference$sound.files == x)),
split.positives = NA,
merged.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = sapply(unique(reference$sound.files), function(x) mean(reference$end - reference$start)),
overlap.to.true.positives = NA,
proportional.duration.true.positives = NA,
recall = 0,
precision =  0,
stringsAsFactors = FALSE
)
# add duty cycle
if (!is.null(path) & time.diagnostics)
performance_df$duty.cycle <- 0
}
# sort columns
performance_df <- performance_df[ , na.omit(match(c("sound.files", "true.positives", "false.positives", "false.negatives", "split.positives", "merged.positives", "mean.duration.true.positives", "mean.duration.false.positives", "mean.duration.false.negatives", "overlap.to.true.positives", "proportional.duration.true.positives", "duty.cycle", "recall", "precision", "f1.score"), names(performance_df)))]
# summarize across sound files
if (!by.sound.file)
performance_df <-
summarize_diagnostic(diagnostic = performance_df, time.diagnostics = time.diagnostics)
performance_df
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# perfect detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = FALSE)
# missing one in detection
diagnose_detection(reference = lbh_reference, detection = lbh_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_reference[-1, ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_reference, detection = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
# with path
dd <- diagnose_detection(reference = lbh_reference[lbh_reference$sound.files != "Phae.long1.wav", ], detection = lbh_reference, time.diagnostics = TRUE, by.sound.file = TRUE, path = tempdir())
# get summary
summarize_diagnostic(dd)
dd
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
