rm(list = ls())
load_all()
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
# run internals
run_ohun_int <- function(){
out <- lapply(list.files(pattern = "ohun_int", path = "./R", full.names = T), source)}
# open working directory
open.wd <- function() system(paste("nautilus", getwd()), show.output.on.console = F)
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a warbleR function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.mp3$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.flac$|\\.wac$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = TRUE, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE)
{
rfiles <- list.files(pattern = file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T, file.ext = "\\.R$|\\.Rmd$", recursive = TRUE){
rfiles <- list.files(pattern =file.ext, path = path, full.names = T, all.files = T, ignore.case = ignore.case, recursive = recursive)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#bid data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
#write all wav files in lbh_selec_table
write.sound.files <- function(path = tempdir(), extensible = T, other.formats = FALSE, selection.table = FALSE){
# setwd(path)
data(lbh_selec_table, package = "warbleR")
tuneR::writeWave(NatureSounds::Phae.long2, file.path(tempdir(),  "Phae.long2.wav"), extensible = extensible) #save sound files
tuneR::writeWave(NatureSounds::Phae.long1, file.path(tempdir(), "Phae.long1.wav"), extensible = extensible)
tuneR::writeWave(NatureSounds::Phae.long3, file.path(tempdir(), "Phae.long3.wav"), extensible = extensible) #save sound files
tuneR::writeWave(NatureSounds::Phae.long4, file.path(tempdir(), "Phae.long4.wav"), extensible = extensible)
if (other.formats){
file.copy(from = system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics"), to = file.path(tempdir(), "recording_20170716_230503.wac"))
file.copy(from = "../Phae.long4.mp3", to = file.path(tempdir(),  "Phae.long4.mp3"))
file.copy(from = file.path(tempdir(), "Phae.long1.wav"), to = file.path(tempdir(), "Phae.long5.wav"))
wav2flac(file.path(tempdir(), "Phae.long5.wav"))
if (selection.table){
lbh_selec_table$sound.files <- as.character(lbh_selec_table$sound.files)
sub_tab <- lbh_selec_table[lbh_selec_table$sound.files %in% c("Phae.long1.wav", "Phae.long4.wav"), 1:7]
sub_tab$sound.files[sub_tab$sound.files == "Phae.long1.wav"] <- "Phae.long5.flac"
sub_tab$sound.files[sub_tab$sound.files == "Phae.long4.wav"] <- "Phae.long4.mp3"
# fix times
sub_tab$start[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.2085945, 1.5950019, 2.3057996)
sub_tab$end[sub_tab$sound.files == "Phae.long4.mp3"] <- c(0.3528653, 1.7287163, 2.4289576)
sub_tab <- rbind(sub_tab, data.frame(sound.files = "recording_20170716_230503.wac", channel = 1, selec = 1, start = 0.1, end = 0.3, bottom.freq = 2, top.freq = 10))
sub_tab <- rbind(sub_tab, lbh_selec_table[, 1:7])
sub_tab$format <-ifelse(grepl("flac$", sub_tab$sound.files), "flac", ifelse(grepl("mp3$", sub_tab$sound.files), "mp3", "wav"))
return(sub_tab)
} else return(NULL)
}
}
# run all warbleR fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
# run.all()
list.selection.table <- function(lbh_selec_table, path = tempdir())
{
crr.dr <- getwd()
on.exit(setwd(crr.dr))
if(!is.null(path)) setwd(path)
Xlist <- list()
Xlist$Xdf <- lbh_selec_table
Xlist$Xst <- selection_table(lbh_selec_table)
Xlist$Xest <- selection_table(lbh_selec_table, extended = T, confirm.extended = F)
lbh_selec_table$song <- as.numeric(lbh_selec_table$sound.files)
Xlist$Xestbs <- selection_table(X = lbh_selec_table, extended = T, by.song = "song", confirm.extended = F)
names(Xlist) <- c("DATA.FRAME", "SELECTION_TABLE", "EXTENDED_SELECTION_TABLE", "by.song.EXTENDED_SELECTION_TABLE")
return(Xlist)
}
bi_mats <- function(X, labels) {
# create empty matrix to store memebership matrix
mat <- matrix(nrow = ncol(X), ncol = ncol(X))
# add labels to row and col names
rownames(mat) <- colnames(mat) <- labels
# add 0 if same lek and 1 if else
out <- lapply(1:(length(labels) - 1), function(i){
sapply((i + 1):length(labels), function(j)
if (labels[i] == labels[j]) 0 else 1)
})
# add to mat
mat[lower.tri(mat)] <- unlist(out)
# retunr as distance matrix
return(as.dist(mat))
}
FUN <- "energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
detec1 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), path = tempdir(), threshold = 0.06, hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, ssmooth = 10)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
# using smoothing and minimum duration
detec1 <- energy_detector(path = tempdir(), threshold = 0.07,
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09, ssmooth = 7)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec1, time.diagnostics = TRUE)
# using hold time
detec2 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.10, hold.time = 0.15,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec2, time.diagnostics = TRUE)
detec3 <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.10, hold.time = 0.15, min.duration = 0.05,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec3, time.diagnostics = TRUE)
# calculate envelopes first
envs <- get_envelopes(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"),
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# run detection
detec <- energy_detector(envelopes = envs, threshold = 0.10, hold.time = 0.15, min.duration = 0.05)
detec <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.1, hold.time = 0.15, min.duration = 0.05)
detec <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.1, hold.time = 0.15, min.duration = 0.05, path = tempdir())
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)
# run detection
detec <- energy_detector(envelopes = envs, threshold = 0.10, hold.time = 0.15, min.duration = 0.05)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)
detec <- energy_detector(files = c("Phae.long1.wav",  "Phae.long2.wav", "Phae.long3.wav", "Phae.long4.wav"), threshold = 0.1, hold.time = 0.15, min.duration = 0.05, path = tempdir(),
bp = c(2, 9), hop.size = 6.8,)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)
# run detection
detec <- energy_detector(envelopes = envs, threshold = 0.10, hold.time = 0.15, min.duration = 0.05)
# diagnose detection
diagnose_detection(reference = lbh_selec_reference, detection = detec, time.diagnostics = TRUE)
FUN <- "optimize_energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.1, 0.15), hop.size = 6.8,
bp = c(2, 9), min.duration = 0.09, by.sound.file = TRUE)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6, 0.1, 0.15), ssmooth = c(300, 1000), thinning = c(0.1, 0.01),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
reference = lbh_selec_reference
path = tempdir()
threshold = c(0.6, 0.1, 0.15)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6, 0.1, 0.15), ssmooth = c(6, 10), thinning = c(0.1, 0.01),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
threshold = c(0.6, 0.1, 0.15)
ssmooth = c(6, 10)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6, 0.1, 0.15), ssmooth = c(6, 10),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6, 0.1, 0.15), ssmooth = c(6),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6), ssmooth = c(6),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
bp = c(2, 9)
hop.size = 6.8
min.duration = 0.09
# hopsize
if (!is.numeric(hop.size) | hop.size < 0) stop("'hop.size' must be a positive number")
if (is_extended_selection_table(reference)) stop("This function cannot take extended selection tables ('reference' argument)")
#if reference is not a data frame
if (!any(is.data.frame(reference), is_selection_table(reference)))
stop("reference is not of a class 'data.frame' or 'selection_table'")
#check if all columns are found
if (any(!(c(
"sound.files", "selec", "start", "end"
) %in% colnames(reference))))
stop(paste(paste(
c("sound.files", "selec", "start", "end")[!(c("sound.files", "selec",
"start", "end") %in% colnames(reference))], collapse =
", "
), "column(s) not found in 'reference'"))
#if there are NAs in start or end stop
if (any(is.na(c(reference$end, reference$start))))
stop("NAs found in start and/or end columns")
#if end or start are not numeric stop
if (any(!is(reference$end, "numeric"),!is(reference$start, "numeric")))
stop("'start' and 'end' must be numeric")
#if any start higher than end stop
if (any(reference$end - reference$start <= 0))
stop(paste(
"Start is higher than or equal to end in",
length(which(reference$end - reference$start <= 0)),
"case(s)"
))
#check path to working directory
if (is.null(path)) path <- getwd() else
if (!dir.exists(path)) stop("'path' provided does not exist") else
path <- normalizePath(path)
# if files not supplied then used those from reference
if (is.null(files))
files <- unique(reference$sound.files)
# get all possible combinations of parameters
exp_grd <- expand.grid(threshold = threshold, power = power, ssmooth = ssmooth, hold.time = hold.time, min.duration = if(is.null(min.duration)) -Inf else min.duration, max.duration = if(is.null(max.duration)) Inf else max.duration, thinning = thinning)
# if previous output included
if (!is.null(previous.output)){
# create composed variable to find overlapping runs
previous.output$temp.label <- apply(previous.output[, c("threshold", "power", "hold.time", "min.duration", "max.duration", "thinning")], 1, paste, collapse = "-")
exp_grd <- exp_grd[!apply(exp_grd[, c("threshold", "power", "hold.time", "min.duration", "max.duration", "thinning")], 1, paste, collapse = "-") %in% previous.output$temp.label, ]
# remove composed variable
previous.output$temp.label <- NULL
}
nrow(exp_grd) == 0
eng_det_l <- warbleR:::pblapply_wrblr_int(X = 1:nrow(exp_grd), pbar = pb, cl = 1, FUN = function(x){
eng_det <- energy_detector(files = files, envelopes = NULL, threshold = exp_grd$threshold[x], ssmooth = exp_grd$ssmooth[x], min.duration = exp_grd$min.duration[x], max.duration = exp_grd$max.duration[x], thinning = exp_grd$thinning[x], parallel = parallel, pb = FALSE, power = exp_grd$power[x], hold.time = exp_grd$hold.time[x], bp = bp, path = path, hop.size = hop.size, wl = wl)
# make factor a character vector
eng_det$sound.files <- as.character(eng_det$sound.files)
eng_det$..row.id <- 1:nrow(eng_det)
eng_det <- eng_det[!is.na(eng_det$start), ]
return(eng_det)
})
exp_grd
x = 1
eng_det <- energy_detector(files = files, envelopes = NULL, threshold = exp_grd$threshold[x], ssmooth = exp_grd$ssmooth[x], min.duration = exp_grd$min.duration[x], max.duration = exp_grd$max.duration[x], thinning = exp_grd$thinning[x], parallel = parallel, pb = FALSE, power = exp_grd$power[x], hold.time = exp_grd$hold.time[x], bp = bp, path = path, hop.size = hop.size, wl = wl)
# make factor a character vector
eng_det$sound.files <- as.character(eng_det$sound.files)
eng_det$..row.id <- 1:nrow(eng_det)
eng_det
if(nrow(eng_det) > 0)
eng_det$..row.id <- 1:nrow(eng_det)
eng_det <- eng_det[!is.na(eng_det$start), ]
eng_det
eng_det_l <- warbleR:::pblapply_wrblr_int(X = 1:nrow(exp_grd), pbar = pb, cl = 1, FUN = function(x){
eng_det <- energy_detector(files = files, envelopes = NULL, threshold = exp_grd$threshold[x], ssmooth = exp_grd$ssmooth[x], min.duration = exp_grd$min.duration[x], max.duration = exp_grd$max.duration[x], thinning = exp_grd$thinning[x], parallel = parallel, pb = FALSE, power = exp_grd$power[x], hold.time = exp_grd$hold.time[x], bp = bp, path = path, hop.size = hop.size, wl = wl)
# make factor a character vector
eng_det$sound.files <- as.character(eng_det$sound.files)
if(nrow(eng_det) > 0)
eng_det$..row.id <- 1:nrow(eng_det)
eng_det <- eng_det[!is.na(eng_det$start), ]
return(eng_det)
})
performance_l <- lapply(eng_det_l, function(Z) suppressWarnings(diagnose_detection(reference = reference, detection = Z, by.sound.file = by.sound.file, time.diagnostics = TRUE, pb = FALSE, parallel = parallel)))
performance <- do.call(rbind, performance_l)
performance
source("~/Dropbox/R_package_testing/ohun/R/optimize_energy_detector.R")
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6), ssmooth = c(6),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6, 0.1, 0.15), ssmooth = c(6, 10), thinning = c(0.1, 0.01),
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09)
# by sound file
(opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), hop.size = 6.8,ssmooth = 10,
bp = c(2, 9), hop.size = 6.8, min.duration = 0.09, by.sound.file = TRUE))
# by sound file
(opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), hop.size = 6.8,ssmooth = 10,
bp = c(2, 9), min.duration = 0.09, by.sound.file = TRUE))
source("~/Dropbox/R_package_testing/ohun/R/energy_detector.R")
# by sound file
(opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), hop.size = 6.8,ssmooth = 10,
bp = c(2, 9), min.duration = 0.09, by.sound.file = TRUE))
# by sound file
(opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.6, 0.10, 0.15), hop.size = 6.8, ssmooth = 10,
bp = c(2, 9), min.duration = 0.09, by.sound.file = TRUE))
# by sound file
(opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(0.06, 0.10, 0.15), hop.size = 6.8, ssmooth = 10,
bp = c(2, 9), min.duration = 0.09, by.sound.file = TRUE))
# summarize
summarize_diagnostic(opt_ed)
# using hold time
(op_ed <- optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.1, 0.15),
bp = c(2, 9), hop.size = 6.8, path = tempdir()))
# using hold time
(op_ed <- optimize_energy_detector(reference = lbh_selec_reference, threshold = 0.1, hold.time = c(0.1, 0.15),
bp = c(2, 9), hop.size = 6.8, path = tempdir()))
# including previous output in new call
optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.05, 0.2), previous.output = op_ed,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# including previous output in new call
optimize_energy_detector(reference = lbh_selec_reference, threshold = 0.1, hold.time = c(0.05, 0.2), previous.output = op_ed,
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# having and extra file in files (simulating a file that should have no detetions)
sub_reference <- lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ]
optimize_energy_detector(reference = sub_reference, files = unique(lbh_selec_reference$sound.files), threshold = 10, hold.time = c(0.1, 0.15),
bp = c(2, 9), hop.size = 6.8, path = tempdir())
optimize_energy_detector(reference = sub_reference, files = unique(lbh_selec_reference$sound.files), threshold = 0.1, hold.time = c(0.1, 0.15),
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
optimize_energy_detector(reference = sub_reference, files = unique(lbh_selec_reference$sound.files), threshold = 0.1, hold.time = c(0.1, 0.15),
bp = c(2, 9), hop.size = 6.8, path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
