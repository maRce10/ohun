if (!is.null(envelopes)){
# check Y being a autodetec.output object
if (!is(envelopes, "envelopes"))
stop("'envelopes' must be and object of class 'envelopes'")
# check that all sound files in reference have and envelope in Y
if (!all(unique(reference$sound.files) %in% names(envelopes)))
stop("Not all sound files in 'reference' are found in 'envelopes'")
# subset envelopes to those in 'reference'
envelopes <- envelopes[unique(reference$sound.files)]
}
files = NULL
source("~/Dropbox/R_package_testing/ohun/R/optimize_energy_detector.R")
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10), ssmooth = 300, envelopes = envs,
bp = c(2, 9), wl = 300, min.duration = 0.09)
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10), ssmooth = 300,
bp = c(2, 9), wl = 300, min.duration = 0.09)
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300,
bp = c(2, 9), wl = 300, min.duration = 0.09)
opt1
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, filter = c("ffilter", "fir"),
bp = c(2, 9), wl = 300, min.duration = 0.09)
opt1
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, filter = c("ffilter", "fir", "bwfilter"),
bp = c(2, 9), wl = 300, min.duration = 0.09)
opt1
# by sound file
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, filter = c("ffilter", "fir"),
bp = c(2, 9), wl = 300, min.duration = 0.09, by.sound.file = TRUE)
FUN <- "diagnose_detection"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
lbh_selec_reference
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ]
detection = lbh_selec_reference
time.diagnostics = TRUE
# remove rows with NAs in detection
detection <- detection[!is.na(detection$start), ]
detection
# look at detections matching 1 training selection at the time
performance_l <- lapply(unique(reference$sound.files), function(z){
# get subset from template for that sound file
W <- reference[reference$sound.files == z, ]
# get subset from detection for that sound file
Z <- detection[detection$sound.files == z, ]
if (nrow(Z) > 0){
# add row labels to both
W$.row.id <- 1:nrow(W)
Z$.row.id <- 1:nrow(Z)
# these are all the true positives
true.positives_l <- lapply(1:nrow(W), function(y){
# defined as any detection that overlaps with the template selections
Q <- Z[(Z$start >= W$start[y] & Z$start < W$end[y]) |
(Z$end > W$start[y] & Z$end <= W$end[y]) |
(Z$start <= W$start[y] & Z$end >= W$end[y]) |
(Z$start >= W$start[y] & Z$end  <= W$end[y]), ]
# add row label to find false.negatives
Q$.template.row.id <- if (nrow(Q) > 0) W$.row.id[y] else
vector()
return(Q)
})
true.positives <- do.call(rbind, true.positives_l)
# those not in true positives
false.positives <- Z[!Z$.row.id %in% true.positives$.row.id, ]
performance <- data.frame(
sound.files = z,
true.positives = length(unique(true.positives$.template.row.id)),
false.positives = nrow(false.positives),
false.negatives = nrow(W) - length(unique(true.positives$.template.row.id)),
split.positives = sum(sapply(true.positives_l, nrow) > 1),
mean.duration.true.positives = mean(true.positives$end - true.positives$start),
mean.duration.false.positives = mean(false.positives$end - false.positives$start),
mean.duration.false.negatives = mean(true.positives$end[!W$.row.id %in% true.positives$.template.row.id] - true.positives$start[!W$.row.id %in% true.positives$.template.row.id]),
proportional.duration.true.positives = mean(true.positives$end - true.positives$start) / mean(W$end - W$start),
sensitivity = length(unique(true.positives$.template.row.id)) / nrow(W),
specificity =  if (nrow(Z) > 0) length(unique(true.positives$.row.id)) / nrow(Z) else 0,
stringsAsFactors = FALSE
)
# replace NaNs with NA
for(i in 1:ncol(performance))
if (is.nan(performance[, i])) performance[, i] <- NA
# fix values when no false positives or true positives
performance$false.positives[performance$false.positives < 0] <- 0
performance$mean.duration.false.positives[is.na(performance$mean.duration.false.positives) | performance$false.positives == 0] <- NA
performance$mean.duration.true.positives[is.na(performance$mean.duration.true.positives) | performance$true.positives == 0] <- NA
# make sensitvities higher than 1 (because of split positives) 1
performance$sensitivity[performance$sensitivity > 1] <- 1
} else
performance <- data.frame(
sound.files = z,
true.positives = 0,
false.positives = 0,
false.negatives = nrow(W),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = mean(W$end - W$start),
proportional.duration.true.positives = NA,
sensitivity = 0,
specificity = 0,
stringsAsFactors = FALSE
)
return(performance)
})
out_df <- do.call(rbind, performance_l)
out_df
detection
detection$sound.files %in% reference$sound.files
!detection$sound.files %in% reference$sound.files
setdiff(detection$sound.files, reference$sound.files)
x <- setdiff(detection$sound.files, reference$sound.files)
sum(detection$sound.files == x)
extra_files_l <- lapply(setdiff(detection$sound.files, reference$sound.files), function(x)
data.frame(
sound.files = x,
true.positives = 0,
false.positives = 0,
false.negatives = sum(detection$sound.files == x),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = mean(detection$end[detection$sound.files == x] - detection$start[detection$sound.files == x]),
proportional.duration.true.positives = NA,
sensitivity = 0,
specificity = 0,
stringsAsFactors = FALSE
)
)
data.frame(
sound.files = x,
true.positives = 0,
false.positives = 0,
false.negatives = sum(detection$sound.files == x),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = mean(detection$end[detection$sound.files == x] - detection$start[detection$sound.files == x]),
proportional.duration.true.positives = NA,
sensitivity = 0,
specificity = 0,
stringsAsFactors = FALSE
)
extra_files_l <- lapply(setdiff(detection$sound.files, reference$sound.files), function(x)
data.frame(
sound.files = x,
true.positives = 0,
false.positives = 0,
false.negatives = sum(detection$sound.files == x),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = mean(detection$end[detection$sound.files == x] - detection$start[detection$sound.files == x]),
proportional.duration.true.positives = NA,
sensitivity = 0,
specificity = 0,
stringsAsFactors = FALSE
)
)
# data frame with extra file info
extra_files <- do.call(rbind,  extra_files_l)
extra_files
# add to diagnostics
out_df <- rbind(out_df, extra_files)
out_df
summarize_diagnostic(diagnostic = out_df, time.diagnostics = time.diagnostics)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# missing one in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[-1, ], time.diagnostics = TRUE)
# an extra one in detection
diagnose_detection(reference = lbh_selec_reference[-1, ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ]
detection = lbh_selec_reference
# remove rows with NAs in detection
detection <- detection[!is.na(detection$start), ]
# run when detection is not empty
if (nrow(detection) > 0){
# look at detections matching 1 training selection at the time
performance_l <- lapply(unique(reference$sound.files), function(z){
# get subset from template for that sound file
W <- reference[reference$sound.files == z, ]
# get subset from detection for that sound file
Z <- detection[detection$sound.files == z, ]
if (nrow(Z) > 0){
# add row labels to both
W$.row.id <- 1:nrow(W)
Z$.row.id <- 1:nrow(Z)
# these are all the true positives
true.positives_l <- lapply(1:nrow(W), function(y){
# defined as any detection that overlaps with the template selections
Q <- Z[(Z$start >= W$start[y] & Z$start < W$end[y]) |
(Z$end > W$start[y] & Z$end <= W$end[y]) |
(Z$start <= W$start[y] & Z$end >= W$end[y]) |
(Z$start >= W$start[y] & Z$end  <= W$end[y]), ]
# add row label to find false.negatives
Q$.template.row.id <- if (nrow(Q) > 0) W$.row.id[y] else
vector()
return(Q)
})
true.positives <- do.call(rbind, true.positives_l)
# those not in true positives
false.positives <- Z[!Z$.row.id %in% true.positives$.row.id, ]
performance <- data.frame(
sound.files = z,
true.positives = length(unique(true.positives$.template.row.id)),
false.positives = nrow(false.positives),
false.negatives = nrow(W) - length(unique(true.positives$.template.row.id)),
split.positives = sum(sapply(true.positives_l, nrow) > 1),
mean.duration.true.positives = mean(true.positives$end - true.positives$start),
mean.duration.false.positives = mean(false.positives$end - false.positives$start),
mean.duration.false.negatives = mean(true.positives$end[!W$.row.id %in% true.positives$.template.row.id] - true.positives$start[!W$.row.id %in% true.positives$.template.row.id]),
proportional.duration.true.positives = mean(true.positives$end - true.positives$start) / mean(W$end - W$start),
sensitivity = length(unique(true.positives$.template.row.id)) / nrow(W),
specificity =  if (nrow(Z) > 0) length(unique(true.positives$.row.id)) / nrow(Z) else 0,
stringsAsFactors = FALSE
)
# replace NaNs with NA
for(i in 1:ncol(performance))
if (is.nan(performance[, i])) performance[, i] <- NA
# fix values when no false positives or true positives
performance$false.positives[performance$false.positives < 0] <- 0
performance$mean.duration.false.positives[is.na(performance$mean.duration.false.positives) | performance$false.positives == 0] <- NA
performance$mean.duration.true.positives[is.na(performance$mean.duration.true.positives) | performance$true.positives == 0] <- NA
# make sensitvities higher than 1 (because of split positives) 1
performance$sensitivity[performance$sensitivity > 1] <- 1
} else
performance <- data.frame(
sound.files = z,
true.positives = 0,
false.positives = 0,
false.negatives = nrow(W),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = mean(W$end - W$start),
proportional.duration.true.positives = NA,
sensitivity = 0,
specificity = 0,
stringsAsFactors = FALSE
)
return(performance)
})
out_df <- do.call(rbind, performance_l)
} else
# output when there were no detections
out_df <-
data.frame(
sound.files = unique(reference$sound.files),
true.positives = 0,
false.positives = 0,
false.negatives = nrow(reference),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = NA,
proportional.duration.true.positives = NA,
sensitivity = 0,
specificity = 0,
stringsAsFactors = FALSE
)
any(!detection$sound.files %in% reference$sound.files)
detection$sound.files
extra_files_l <- lapply(setdiff(detection$sound.files, reference$sound.files), function(x)
data.frame(
sound.files = x,
true.positives = 0,
false.positives = 0,
false.negatives = sum(detection$sound.files == x),
split.positives = NA,
mean.duration.true.positives = NA,
mean.duration.false.positives = NA,
mean.duration.false.negatives = mean(detection$end[detection$sound.files == x] - detection$start[detection$sound.files == x]),
proportional.duration.true.positives = NA,
sensitivity = 100,
specificity = 0,
stringsAsFactors = FALSE
)
)
# data frame with extra file info
extra_files <- do.call(rbind,  extra_files_l)
extra_files
# data frame with extra file info
extra_files <- do.call(rbind,  extra_files_l)
extra_files
rbind(out_df, extra_files)
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# and extra sound file in detection
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
dd
source("~/Dropbox/R_package_testing/ohun/R/diagnose_detection.R")
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in reference
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], time.diagnostics = TRUE)
# and extra sound file in detection
diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE)
# and extra sound file in detection by sound file
dd <- diagnose_detection(reference = lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ], detection = lbh_selec_reference, time.diagnostics = TRUE, by.sound.file = TRUE)
summarize_diagnostic(dd)
source("~/Dropbox/R_package_testing/ohun/R/optimize_energy_detector.R")
source("~/Dropbox/R_package_testing/ohun/R/optimize_energy_detector.R")
# perfect detection
diagnose_detection(reference = lbh_selec_reference, detection = lbh_selec_reference, time.diagnostics = TRUE)
FUN <- "optimize_energy_detector"
#run function
source(file.path("./R", paste0(FUN,".R")))
# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))
#remove images and sound files
rm.sf()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
# EXAMPLES
# save wav file examples
write.sound.files()
list.files(tempdir(), ".wav")
# using smoothing and minimum duration
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10), ssmooth = 300,
bp = c(2, 9), wl = 300, min.duration = 0.09)
# using smoothing and minimum duration
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10), ssmooth = 300,
bp = c(2, 9), wl = 300, min.duration = 0.09)
#  2 filer
opt1 <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, filter = c("ffilter", "fir"),
bp = c(2, 9), wl = 300, min.duration = 0.09)
opt1
# by sound file
opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, filter = c("ffilter", "fir"),
bp = c(2, 9), wl = 300, min.duration = 0.09, by.sound.file = TRUE)
# by sound file
(opt_ed <- optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, filter = c("ffilter", "fir"),
bp = c(2, 9), wl = 300, min.duration = 0.09, by.sound.file = TRUE))
# summarize
summarize_diagnostic(opt_ed)
detec2 <- optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.1, 0.15),
bp = c(2, 9), wl = 300, path = tempdir())
detec2
lbh_selec_reference
# having and extra file in files (simulating a file that should not have detetions)
sub_reference <- lbh_selec_reference[lbh_selec_reference$sound.files != "Phae.long1.wav", ]
optimize_energy_detector(reference = sub_reference, files = unique(lbh_selec_reference$sound.files), threshold = 10, hold.time = c(0.1, 0.15),
bp = c(2, 9), wl = 300, path = tempdir())
# with thinning
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = 300, thinning = c(0.1, 0.01),
bp = c(2, 9), wl = 300, min.duration = 0.09)
# with thinning and smoothing
optimize_energy_detector(reference = lbh_selec_reference, path = tempdir(), threshold = c(6, 10, 15), ssmooth = c(300, 1000), thinning = c(0.1, 0.01),
bp = c(2, 9), wl = 300, min.duration = 0.09)
# including previous output in new call
optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.1, 0.15), previous.output = op_ed,
bp = c(2, 9), wl = 300, path = tempdir())
# using hold time
(op_ed <- optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.1, 0.15),
bp = c(2, 9), wl = 300, path = tempdir()))
# including previous output in new call
optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.1, 0.15), previous.output = op_ed,
bp = c(2, 9), wl = 300, path = tempdir())
# including previous output in new call
optimize_energy_detector(reference = lbh_selec_reference, threshold = 10, hold.time = c(0.05, 0.2), previous.output = op_ed,
bp = c(2, 9), wl = 300, path = tempdir())
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
x <- c("devtools", "fftw", "seewave", "pbapply", "RCurl", "rjson", "microbenchmark", "pkgdown")
aa <- lapply(x, function(y){
if(!y %in% installed.packages()[,"Package"])  {if(y != "warbleR") install.packages(y) else devtools::install_github("maRce10/warbleR")
}
try(require(y, character.only = T), silent = T)
})
# check spelling
schk <- devtools::spell_check(".")
schk
unlink(list.files(pattern = "warbleR\\.pdf", path = "."))
system("R CMD Rd2pdf .")
#built site
pkgdown::build_site(lazy = TRUE, preview = TRUE, examples = FALSE)
pkgdown::build_articles()
# system("autoconf  ")
# usethis::use_rcpp()
# setwd("./warbleR/")
#delete NAMESPACE file
# Rcpp::compileAttributes()
#run document twice
# devtools::document(".")
# devtools::load_all()
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
# devtools::run_examples( start = "rm_sil")
# devtools::build_manual()
# devtools::install()
# check in R version 3.X.X
## run in terminal:
# /opt/R/3.6.3/bin/R
# devtools::check("~/Dropbox/R_package_testing/warbleR/warbleR", document = TRUE, run_dont_test = TRUE, vignettes = FALSE, manual = TRUE)
